generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Customer =======================================

model Customer {
  uid            String  @id
  email          String  @unique
  password       String
  first_name     String
  last_name      String
  contact_no     String? @unique
  address_line_1 String?
  address_line_2 String?
  city           String?
  district       String?
  // Appointment    Appointment[]
}

model Unregistered_Customer {
  contact_no     String  @id
  email          String  @unique
  first_name     String
  last_name      String
  address_line_1 String?
  address_line_2 String?
  city           String?
  district       String?
}

// Employee =======================================

model Employee {
  uid            String   @id
  email          String   @unique
  password       String
  first_name     String
  last_name      String
  contact_no     String?  @unique
  address_line_1 String?
  address_line_2 String?
  city           String?
  district       String?
  role           role
  gender         String?
  doj            String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  // Appointment    Appointment[]
}

enum role {
  ADMIN
  OWNER
  MANAGER
  BEAUTICIAN
  RECEPTIONIST
}

// Service =======================================

model Service {
  id          String   @id
  name        String
  category    String
  description String?  @db.Text
  price       Float
  duration    String
  status      String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  // Appointments Appointment[]
}

// Appointment =======================================

model Appointment {
  id            String  @id
  date          String
  status        String
  services      String
  beautician    String
  beautician_id String
  customer      String
  customer_id   String
  totalPrice    Float
  startTime     String?
  duration      String?
  // customer    Customer  @relation(fields: [customer_id], references: [uid])
  // customer_id String
  // employee    Employee? @relation(fields: [employee_id], references: [uid])
  // employee_id String?
  // services    Service[]
}

// products =======================================

enum Status {
  IN_STOCK
  OUT_STOCK
  LOW_STOCK
}

model Product {
  id                 String   @id
  name               String
  image              String?
  description        String?  @db.Text
  brand              String
  category           String
  type               String
  status             Status   @default(OUT_STOCK)
  volume             Float?
  volume_unit        String?
  low_stock_quantity Int?
  stock              Stock[]
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
}

// barcode =======================================

model barcode {
  code       String  @id
  product_id String
  Stock      Stock?  @relation(fields: [stockId], references: [id])
  stockId    String?
}

// Stock =======================================
model Stock {
  id                String    @id
  product           Product   @relation(fields: [product_id], references: [id])
  product_id        String
  quantity          Int
  unit_price        Float
  manufacturer_date DateTime?
  expiry_date       DateTime?
  supplier          Supplier? @relation(fields: [supplierId], references: [id])
  supplierId        String?
  barcode           barcode[]
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
}

// Supplier =======================================

model Supplier {
  id         String   @id
  name       String
  contact_no String?  @unique
  address    String?
  email      String?  @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Stock      Stock[]
}

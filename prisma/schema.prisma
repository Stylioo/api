generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Customer =======================================

model Customer {
  id             String        @id @default(cuid())
  email          String        @unique
  password       String
  first_name     String
  last_name      String
  contact_no     String?       @unique
  address_line_1 String?
  address_line_2 String?
  city           String?
  district       String?
  appointment    Appointment[]
}

model Unregistered_Customer {
  contact_no     String  @id
  email          String  @unique
  first_name     String
  last_name      String
  address_line_1 String?
  address_line_2 String?
  city           String?
  district       String?
}

// Employee =======================================

model Employee {
  id                    String          @id @default(cuid())
  email                 String          @unique
  password              String
  salutation            String?         @default("NONE")
  first_name            String
  last_name             String
  image                 String?
  dob                   DateTime?
  gender                String?
  contact_no            String?         @unique
  address_line_1        String?
  address_line_2        String?
  city                  String?
  district              String?
  role                  String
  doj                   DateTime?
  fixed_salary          Float?
  commission            Float?
  hourly_charge_rate    Float?
  working_hours         Float?
  leave_count           Int             @default(0)
  status                EmployeeStatus  @default(INACTIVE)
  created_at            DateTime        @default(now())
  updated_at            DateTime        @updatedAt
  leave_request         LeaveRequest[]
  qualifications        Qualification[]
  appointment           Appointment[]   @relation(name: "beautician")
  appointment_change_by Appointment[]   @relation(name: "receptionist")
}

enum Role {
  ADMIN
  OWNER
  MANAGER
  BEAUTICIAN
  RECEPTIONIST
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  RESIGNED
  ON_LEAVE
  WORKING
  ON_BREAK
}

enum Salutation {
  NONE
  MR
  MS
  MRS
}

model LeaveRequest {
  id          String             @id @default(cuid())
  employee    Employee           @relation(fields: [employee_id], references: [id])
  employee_id String
  start_date  DateTime
  end_date    DateTime
  status      LeaveRequestStatus @default(PENDING)
  reason      String?
  created_at  DateTime           @default(now())
  updated_at  DateTime           @updatedAt
}

enum LeaveRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

// qualification =======================================

model Qualification {
  id            String    @id @default(cuid())
  qualification String
  institute     String
  start_date    DateTime?
  end_date      DateTime?
  employee      Employee  @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id   String
}

// permission =======================================
// model Permission {
//   id          String   @id @default(cuid())
//   name        String
//   slug        String
//   description String?
//   created_at  DateTime @default(now())
//   updated_at  DateTime @updatedAt
//   roles       role[]
// }

// model role {
//   id          String       @id @default(cuid())
//   name        String
//   slug        String
//   description String?
//   created_at  DateTime     @default(now())
//   updated_at  DateTime     @updatedAt
//   permissions Permission[]
// }

// Service =======================================

model Service {
  id          String        @id @default(cuid())
  name        String
  category    String
  description String?       @db.Text
  price       Float
  duration    Int
  status      String
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  appointment Appointment[]
}

// Appointment =======================================

model Appointment {
  id                      String    @id @default(cuid())
  appointment_date        DateTime  @db.Date
  status                  String
  total_price             Float
  advanced_payment_amount Float
  start_time              String?
  duration                Int?
  service                 Service[]
  customer                Customer? @relation(fields: [customer_id], references: [id])
  customer_id             String?
  beautician              Employee? @relation(name: "beautician", fields: [beautician_id], references: [id])
  beautician_id           String?
  status_changed_by       Employee? @relation(name: "receptionist", fields: [status_changed_by_id], references: [id])
  status_changed_by_id    String?
  created_at              DateTime  @default(now())
  updated_at              DateTime  @updatedAt
}

// products =======================================

enum Status {
  IN_STOCK
  OUT_STOCK
  LOW_STOCK
}

model Product {
  id                 String   @id @default(cuid())
  name               String
  image              String?
  description        String?  @db.Text
  brand              String
  category           String
  type               String
  status             Status   @default(OUT_STOCK)
  volume             Float?
  volume_unit        String?
  low_stock_quantity Int?
  stock              Stock[]
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
}

// barcode =======================================

model barcode {
  code       String  @id @default(cuid())
  product_id String
  Stock      Stock?  @relation(fields: [stock_id], references: [id])
  stock_id   String?
}

// Stock =======================================

model Stock {
  id                String    @id @default(cuid())
  product           Product   @relation(fields: [product_id], references: [id])
  product_id        String
  quantity          Int
  unit_price        Float
  manufacturer_date DateTime?
  expiry_date       DateTime?
  supplier          Supplier? @relation(fields: [supplier_id], references: [id])
  supplier_id       String?
  barcode           barcode[]
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
}

// Supplier =======================================

model Supplier {
  id             String   @id @default(cuid())
  name           String
  contact_no     String?  @unique
  address_line_1 String?
  address_line_2 String?
  email          String?  @unique
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  stock          Stock[]
}
